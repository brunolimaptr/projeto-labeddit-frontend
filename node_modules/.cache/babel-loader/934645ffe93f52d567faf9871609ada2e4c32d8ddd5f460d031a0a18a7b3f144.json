{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bruno\\\\Desktop\\\\projeto-labeddit-frontend\\\\main\\\\src\\\\pages\\\\postsComments.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function PostComment(props) {\n  _s();\n  const params = useParams();\n  const [postsComments, setPostsComments] = useState([]);\n  const onChangeComment = e => {\n    setPostsComments(e.target.value);\n  };\n  const bodyCreateComment = {\n    \"comment\": postsComments\n  };\n  const createComment = async () => {\n    try {\n      const response = await axios.post(`https://labeddit-0qmm.onrender.com/posts/comment/${params.id}`, bodyCreateComment, {\n        headers: {\n          \"Authorization\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImQzNzNkN2FjLTc0OTMtNDNlNS1iMGE0LTZlOGIwNDA3NjA0YyIsIm5pY2tfbmFtZSI6ImphbyIsInJvbGUiOiJVc3VhcmlvIiwiaWF0IjoxNjc4OTE1MTg4LCJleHAiOjE2NzkwMDE1ODh9.g5IVRTw4Rv2s55mPqlvchpBG35tKHw7AxNzcFBt3UN0\"\n        }\n      });\n      console.log(response.data.Post);\n      setPostsComments(response.data.Post);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const getPostComment = async () => {\n    try {\n      const response = await axios.get(`https://labeddit-0qmm.onrender.com/posts/comment/${params.id}`, {\n        headers: {\n          \"Authorization\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImQzNzNkN2FjLTc0OTMtNDNlNS1iMGE0LTZlOGIwNDA3NjA0YyIsIm5pY2tfbmFtZSI6ImphbyIsInJvbGUiOiJVc3VhcmlvIiwiaWF0IjoxNjc4OTA0NjM4LCJleHAiOjE2Nzg5OTEwMzh9.JWJ5Bx4EgR2KfZSk6CAoprfp1vXvIhiumr5nEwuVkDE\"\n        }\n      });\n      console.log(response.data.Post);\n      setPostsComments(response.data.Post);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    getPostComment();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: onChangeComment,\n      type: \"text\",\n      value: postsComments,\n      placeholder: \"Adicionar comentário\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createComment,\n      children: /*#__PURE__*/_jsxDEV(\"em\", {\n        children: \"Responder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 45\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), postsComments[0] && postsComments.map(post => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.comentsPost.map(commment => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: commment.comment\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 32\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 24\n      }, this);\n    })]\n  }, void 0, true);\n}\n_s(PostComment, \"qQDD778XRcnazW2VyZZ93wnYy9U=\", false, function () {\n  return [useParams];\n});\n_c = PostComment;\nvar _c;\n$RefreshReg$(_c, \"PostComment\");","map":{"version":3,"names":["React","useEffect","useState","axios","useNavigate","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","PostComment","props","_s","params","postsComments","setPostsComments","onChangeComment","e","target","value","bodyCreateComment","createComment","response","post","id","headers","console","log","data","Post","error","getPostComment","get","children","onChange","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","content","comentsPost","commment","comment","_c","$RefreshReg$"],"sources":["C:/Users/Bruno/Desktop/projeto-labeddit-frontend/main/src/pages/postsComments.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\n\r\nexport function PostComment(props){\r\n\r\n    const params = useParams()\r\n\r\n     const [postsComments, setPostsComments] = useState([])\r\n\r\n\r\n    const onChangeComment = (e) => {\r\n        setPostsComments(e.target.value);\r\n       }\r\n\r\n       const bodyCreateComment = {\r\n        \"comment\": postsComments,\r\n    }\r\n\r\n    const createComment = async () => {\r\n        try {\r\n            const response = await axios.post(`https://labeddit-0qmm.onrender.com/posts/comment/${params.id}`, bodyCreateComment, {\r\n                headers: {\r\n                    \"Authorization\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImQzNzNkN2FjLTc0OTMtNDNlNS1iMGE0LTZlOGIwNDA3NjA0YyIsIm5pY2tfbmFtZSI6ImphbyIsInJvbGUiOiJVc3VhcmlvIiwiaWF0IjoxNjc4OTE1MTg4LCJleHAiOjE2NzkwMDE1ODh9.g5IVRTw4Rv2s55mPqlvchpBG35tKHw7AxNzcFBt3UN0\"\r\n                }\r\n            })\r\n\r\n            console.log(response.data.Post);\r\n            setPostsComments(response.data.Post)\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const getPostComment = async () => {\r\n        try {\r\n            const response = await axios.get(`https://labeddit-0qmm.onrender.com/posts/comment/${params.id}`,{\r\n                headers: {\r\n                    \"Authorization\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImQzNzNkN2FjLTc0OTMtNDNlNS1iMGE0LTZlOGIwNDA3NjA0YyIsIm5pY2tfbmFtZSI6ImphbyIsInJvbGUiOiJVc3VhcmlvIiwiaWF0IjoxNjc4OTA0NjM4LCJleHAiOjE2Nzg5OTEwMzh9.JWJ5Bx4EgR2KfZSk6CAoprfp1vXvIhiumr5nEwuVkDE\"\r\n                }\r\n            })\r\n\r\n            console.log(response.data.Post);\r\n            setPostsComments(response.data.Post)\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        getPostComment()\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <>\r\n    \r\n            <input onChange={onChangeComment} type=\"text\" value={postsComments} placeholder={\"Adicionar comentário\"}></input>\r\n            <button onClick={createComment}><em>Responder</em></button>\r\n    \r\n            {postsComments[0] && postsComments.map((post)=>{\r\n                return <div key={post.id}>\r\n                    <p>{post.content}</p>\r\n                    <p>{post.comentsPost.map((commment)=>{\r\n                        return <div>\r\n                            <p>{commment.comment}</p>\r\n                        </div>\r\n                    })}</p>\r\n                \r\n                \r\n    \r\n                </div>\r\n            })}\r\n           \r\n        </>\r\n    )\r\n    \r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}